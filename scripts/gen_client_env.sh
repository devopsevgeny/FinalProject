#!/usr/bin/env bash
set -euo pipefail

# --- Settings ---------------------------------------------------
# Overwrite mode: --force to overwrite .env without prompt
FORCE=0
if [[ "${1:-}" == "--force" ]]; then FORCE=1; fi

# Default values you may want to customize
DEFAULT_CORS_ORIGINS="http://localhost:3000"
DEFAULT_JWT_ALG="HS256"
DEFAULT_JWT_AUD="confmgr"
DEFAULT_JWT_EXP="3600"   # seconds
# ---------------------------------------------------------------

umask 077  # ensure the created file is not world-readable

# Helpers
rand_hex() { openssl rand -hex "$1"; }            # bytes -> hex string
new_uuid() { uuidgen | tr '[:upper:]' '[:lower:]'; }

# Generate values
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="postgres"
POSTGRES_DB="postgres"

CLIENT_ID="$(new_uuid)"
CLIENT_SECRET="$(rand_hex 32)"
ISSUER="confmgr-$(rand_hex 4)"

DATA_KEY_HEX="$(rand_hex 32)"         # 32 bytes hex (AES-256-GCM key)
API_KEY="$(rand_hex 32)"              # dev API key
SYSTEM_PRINCIPAL_ID="$(new_uuid)"     # system principal UUID for writes w/o user

JWT_ALG="${DEFAULT_JWT_ALG}"
JWT_SIGNING_KEY="$(rand_hex 64)"      # long random secret for HS256
JWT_AUDIENCE="${DEFAULT_JWT_AUD}"
JWT_EXP_DELTA_SECONDS="${DEFAULT_JWT_EXP}"

CORS_ORIGINS="${DEFAULT_CORS_ORIGINS}"

# Prepare .env content (no 'export ' prefix; docker compose reads KEY=VAL)
ENV_CONTENT="# ----- Generated by scripts/gen_env.sh -----
# Postgres superuser (used by official image init)
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=${POSTGRES_DB}

# Seed API client (used on first init to insert a demo client)
CLIENT_ID=${CLIENT_ID}
CLIENT_SECRET=${CLIENT_SECRET}
ISSUER=${ISSUER}

# Master encryption key for secrets (AES-256-GCM)
DATA_KEY_HEX=${DATA_KEY_HEX}

# Dev API key (temporary until we switch to JWT everywhere)
API_KEY=${API_KEY}

# System principal UUID (used when no user/principal is present)
SYSTEM_PRINCIPAL_ID=${SYSTEM_PRINCIPAL_ID}

# JWT settings (for Bearer auth)
JWT_ALG=${JWT_ALG}
JWT_SIGNING_KEY=${JWT_SIGNING_KEY}
JWT_AUDIENCE=${JWT_AUDIENCE}
JWT_EXP_DELTA_SECONDS=${JWT_EXP_DELTA_SECONDS}
JWT_ISSUER=${ISSUER}

# CORS
CORS_ORIGINS=${CORS_ORIGINS}
# ----- End of generated block -----"

# Write .env safely
if [[ -f .env && ${FORCE} -eq 0 ]]; then
  ts="$(date +%s)"
  cp .env ".env.bak-${ts}"
  echo "[gen] Existing .env backed up to .env.bak-${ts}"
fi
printf "%s\n" "${ENV_CONTENT}" > .env

# Print a short masked summary (do not leak secrets in CI logs)
mask() { local s="$1"; local n=${#s}; echo "${s:0:6}â€¦${s:n-4:4}"; }

echo "[gen] .env created with:"
echo "  CLIENT_ID=$(echo "${CLIENT_ID}")"
echo "  CLIENT_SECRET=$(mask "${CLIENT_SECRET}")"
echo "  ISSUER=${ISSUER}"
echo "  DATA_KEY_HEX=$(mask "${DATA_KEY_HEX}")"
echo "  API_KEY=$(mask "${API_KEY}")"
echo "  SYSTEM_PRINCIPAL_ID=${SYSTEM_PRINCIPAL_ID}"
echo "  JWT_ALG=${JWT_ALG}"
echo "  JWT_SIGNING_KEY=$(mask "${JWT_SIGNING_KEY}")"
echo "  JWT_AUDIENCE=${JWT_AUDIENCE}"
echo "  JWT_EXP_DELTA_SECONDS=${JWT_EXP_DELTA_SECONDS}"
echo "  CORS_ORIGINS=${CORS_ORIGINS}"

